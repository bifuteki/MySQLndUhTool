<?php

namespace MySQLndUhTool\Event;

require_once dirname(__FILE__) . '/../../../../src/MySQLndUhTool/Event/Connect.php';

/**
 * Test class for Connect.
 * Generated by PHPUnit on 2011-09-15 at 10:10:40.
 */
class ConnectTest extends \PHPUnit_Framework_TestCase {

    /**
     * @var Connect
     */
    protected $object;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp() {
        $this->object = $this->getMockBuilder('MySQLndUhTool\Event\Connect')
             ->disableOriginalConstructor()
             ->setMethods(array('__construct'))
             ->getMock();
    }

    public function testHost() {
        $this->assertEquals(null, $this->object->getHost());
        $this->object->setHost('server02');
        $this->assertAttributeEquals('server02', 'host', $this->object);
        $this->assertEquals('server02', $this->object->getHost());
    }

    public function testUser() {
        $this->assertEquals(null, $this->object->getUser());
        $this->object->setUser('root');
        $this->assertAttributeEquals('root', 'user', $this->object);
        $this->assertEquals('root', $this->object->getUser());
    }

    public function testPassword() {
        $this->assertEquals(null, $this->object->getPassword());
        $this->object->setPassword('123qwe');
        $this->assertAttributeEquals('123qwe', 'password', $this->object);
        $this->assertEquals('123qwe', $this->object->getPassword());
    }

    public function testDatabase() {
        $this->assertEquals(null, $this->object->getDatabase());
        $this->object->setDatabase('my_db');
        $this->assertAttributeEquals('my_db', 'database', $this->object);
        $this->assertEquals('my_db', $this->object->getDatabase());
    }

    public function testPort() {
        $this->assertEquals(null, $this->object->getPort());
        $this->object->setPort('1234');
        $this->assertAttributeEquals('1234', 'port', $this->object);
        $this->assertEquals('1234', $this->object->getPort());
    }

    public function testSocket() {
        $this->assertEquals(null, $this->object->getSocket());
        $this->object->setSocket('my_socket');
        $this->assertAttributeEquals('my_socket', 'socket', $this->object);
        $this->assertEquals('my_socket', $this->object->getSocket());
    }

    public function testMysqlFlags() {
        $this->assertEquals(null, $this->object->getMysqlFlags());
        $this->object->setMysqlFlags(456);
        $this->assertAttributeEquals(456, 'mysqlFlags', $this->object);
        $this->assertEquals(456, $this->object->getMysqlFlags());
    }
}